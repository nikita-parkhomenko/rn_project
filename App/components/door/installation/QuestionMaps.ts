import QuestionCodes from '../../../constants/QuestionCodes';

const QuestionAnswerMap = {
  [QuestionCodes.DoorCloserAdjusted]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorCloserFitted]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorCloserInternalExternal]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorComplete]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorFrameFixedSecurely]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorFrameFixingCount]: (answer: any) => Boolean(answer) && Boolean(answer.fixingsPerJamb),
  [QuestionCodes.DoorFurnitureFitted]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorIdentifiedLabelled]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorLatchWhenClosed]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorLeafDoorStop]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorLeafFrameDamage]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorLockWork]: (answer: any) => Boolean(answer),
  [QuestionCodes.FireSignageFitted]: (answer: any) => Boolean(answer),
  [QuestionCodes.FireStoppingUsed]: (answer: any) => Boolean(answer && answer.value),
  [QuestionCodes.FrameFireStoppedFitted]: (answer: any) => Boolean(answer),
  [QuestionCodes.GapThresholdCorrect]: (answer: any) => Boolean(answer),
  [QuestionCodes.GapsSlabFrameTolerance]: (answer: any) => Boolean(answer),
  [QuestionCodes.GlazingSecure]: (answer: any) => Boolean(answer),
  [QuestionCodes.IntumescentSealsFitted]: (answer: any) => Boolean(answer),
  [QuestionCodes.MinimumHingesFitted]: (answer: any) => Boolean(answer),
  [QuestionCodes.SmokeSealsFitted]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorIdentifiedLabelledInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorLeafFrameDamageInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorFixedFirmlyInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorCloserFittedInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorCloserAdjustedInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.HoldOpenDeviceFittedInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorLatchWhenClosedInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorLockWorkInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.SuitableHardwareFittedInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.HardwareFixedCorrectlyInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.GapsSlabFrameToleranceInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.GapThresholdCorrectInsp]: (answer: any) => Boolean(answer) && Boolean(answer.gapMeasurement),
  [QuestionCodes.IntumescentSealsFittedInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.SmokeSealsUndamagedInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.MinimumHingesFittedInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.AirGrillesUndamagedInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.GlazingSecureInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.FrameFireStoppedInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.FireStoppingUsedInsp]: (answer: any) => Boolean(answer && answer.value),
  [QuestionCodes.FireSignageFittedInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.LetterPlateUndamagedInsp]: (answer: any) => Boolean(answer),
  [QuestionCodes.DoorOperatesFreelyInsp]: (answer: any) => Boolean(answer),
};

const QuestionPhotoMap = {
  [QuestionCodes.DoorCloserAdjusted]: (_answer: any) => false,
  [QuestionCodes.DoorCloserFitted]: (_answer: any) => false,
  [QuestionCodes.DoorCloserInternalExternal]: (_answer: any) => false,
  [QuestionCodes.DoorComplete]: (answer: any) => Boolean(answer?.value),
  [QuestionCodes.DoorFrameFixedSecurely]: (_answer: any) => false,
  [QuestionCodes.DoorFrameFixingCount]: (_answer: any) => false,
  [QuestionCodes.DoorFurnitureFitted]: (_answer: any) => false,
  [QuestionCodes.DoorIdentifiedLabelled]: (_answer: any) => true,
  [QuestionCodes.DoorLatchWhenClosed]: (_answer: any) => false,
  [QuestionCodes.DoorLeafDoorStop]: (answer: any) => Boolean(answer?.value === false),
  [QuestionCodes.DoorLeafFrameDamage]: (answer: any) => Boolean(answer?.value),
  [QuestionCodes.DoorLockWork]: (_answer: any) => false,
  [QuestionCodes.FireSignageFitted]: (_answer: any) => false,
  [QuestionCodes.FireStoppingUsed]: (_answer: any) => true,
  [QuestionCodes.FrameFireStoppedFitted]: (answer: any) => Boolean(answer?.value),
  [QuestionCodes.GapThresholdCorrect]: (_answer: any) => true,
  [QuestionCodes.GapsSlabFrameTolerance]: (_answer: any) => true,
  [QuestionCodes.GlazingSecure]: (answer: any) => Boolean(answer?.value === false),
  [QuestionCodes.IntumescentSealsFitted]: (_answer: any) => false,
  [QuestionCodes.MinimumHingesFitted]: (_answer: any) => false,
  [QuestionCodes.SmokeSealsFitted]: (_answer: any) => false,
  [QuestionCodes.DoorIdentifiedLabelledInsp]: (answer: any) => Boolean(answer?.value),
  [QuestionCodes.DoorLeafFrameDamageInsp]: (answer: any) => Boolean(answer?.value),
  [QuestionCodes.DoorFixedFirmlyInsp]: (_answer: any) => false,
  [QuestionCodes.DoorCloserFittedInsp]: (_answer: any) => false,
  [QuestionCodes.DoorCloserAdjustedInsp]: (_answer: any) => false,
  [QuestionCodes.HoldOpenDeviceFittedInsp]: (_answer: any) => false,
  [QuestionCodes.DoorLatchWhenClosedInsp]: (_answer: any) => false,
  [QuestionCodes.DoorLockWorkInsp]: (_answer: any) => false,
  [QuestionCodes.SuitableHardwareFittedInsp]: (answer: any) => Boolean(answer?.value === false),
  [QuestionCodes.HardwareFixedCorrectlyInsp]: (answer: any) => Boolean(answer?.value === false),
  [QuestionCodes.GapsSlabFrameToleranceInsp]: (_answer: any) => true,
  [QuestionCodes.GapThresholdCorrectInsp]: (_answer: any) => true,
  [QuestionCodes.IntumescentSealsFittedInsp]: (answer: any) => Boolean(answer?.value === false),
  [QuestionCodes.SmokeSealsUndamagedInsp]: (answer: any) => Boolean(answer?.value === 'No'),
  [QuestionCodes.MinimumHingesFittedInsp]: (_answer: any) => false,
  [QuestionCodes.AirGrillesUndamagedInsp]: (answer: any) => Boolean(answer?.value === 'No'),
  [QuestionCodes.GlazingSecureInsp]: (answer: any) => Boolean(answer?.value === false),
  //yes or no, but no photos if 'Unable to Confirm'
  [QuestionCodes.FrameFireStoppedInsp]: (answer: any) => {
    return answer?.value === 'Yes' || answer?.value === 'No';
  },
  [QuestionCodes.FireStoppingUsedInsp]: (_answer: any) => false,
  [QuestionCodes.FireSignageFittedInsp]: (_answer: any) => false,
  [QuestionCodes.LetterPlateUndamagedInsp]: (_answer: any) => false,
  [QuestionCodes.DoorOperatesFreelyInsp]: (answer: any) => Boolean(answer?.value === false),
};

export { QuestionAnswerMap, QuestionPhotoMap };
